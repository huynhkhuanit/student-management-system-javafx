package controller;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ResourceBundle;
import javax.security.auth.Subject;

import components.AlertComponent;
import javafx.fxml.FXML;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.chart.AreaChart;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.LineChart;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import util.showStage;
import javafx.scene.layout.StackPane;
import javafx.scene.control.TableView;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn.CellEditEvent;
import javafx.stage.StageStyle;
import java.sql.Statement;
import java.util.Date;
import java.time.LocalDate;

// model data
import model.StudentData;
import database.database;

public class dashboardController {
    // Database tools
    private Connection connect;
    private PreparedStatement preparedStatement;
    private Statement statement;
    private ResultSet resultSet;

    @FXML
    private Button closeBtn;

    @FXML
    private Button dashboardBtn;

    @FXML
    private AnchorPane dashboardForm;

    @FXML
    private StackPane mainDashboard;

    @FXML
    private Button minimizeBtn, logoutBtn;

    @FXML
    private ResourceBundle resources;

    // ========== DASHBOARD PROPERTY ==========

    @FXML
    private Label totalStudentsLabel, totalMaleStudentsLabel, totalFemaleStudentsLabel;
    @FXML
    private AreaChart<?, ?> avgScoreChart;
    @FXML
    private LineChart<?, ?> yearlyStatsChart;
    @FXML
    private BarChart<?, ?> totalStudentsChart;

    // ========== DASHBOARD PROPERTY ==========

    // ========== SINH VI√äN PROPERTY ==========
    @FXML
    private AnchorPane studentManageForm;
    @FXML
    private Button studentManageBtn;

    // B·∫£ng d·ªØ li·ªáu sinh vi√™n
    @FXML
    private TableView<StudentData> studentTable;

    // C√°c c·ªôt trong b·∫£ng sinh vi√™n
    @FXML
    private TableColumn<StudentData, String> student_colStudentID; // C·ªôt MSSV
    @FXML
    private TableColumn<StudentData, String> student_colLastName; // C·ªôt T√™n
    @FXML
    private TableColumn<StudentData, String> student_colFirstName; // C·ªôt H·ªç
    @FXML
    private TableColumn<StudentData, String> student_colBirthYear; // C·ªôt NƒÉm sinh
    @FXML
    private TableColumn<StudentData, String> student_colGender; // C·ªôt Gi·ªõi t√≠nh
    @FXML
    private TableColumn<StudentData, String> student_colSchoolYear; // C·ªôt NƒÉm h·ªçc
    @FXML
    private TableColumn<StudentData, String> student_colMajor; // C·ªôt Chuy√™n ng√†nh
    @FXML
    private TableColumn<StudentData, String> student_colSubject; // C·ªôt M√¥n h·ªçc
    @FXML
    private TableColumn<StudentData, String> student_colStatus; // C·ªôt Tr·∫°ng th√°i

    // üîò Khu v·ª±c ch·ª©a c√°c n√∫t ƒëi·ªÅu khi·ªÉn
    @FXML
    private HBox controlButtonsBox;

    @FXML
    private Button btnAdd;

    @FXML
    private Button btnClearAll;

    @FXML
    private Button btnDelete;

    @FXML
    private Button btnRefresh;

    @FXML
    private Button btnUpdate;

    // √î t√¨m ki·∫øm
    @FXML
    private TextField studentManageSearch;

    // ========== SINH VI√äN PROPERTY ==========

    // ========== M√îN H·ªåC PROPERTY ==========

    @FXML
    private Button courseManageBtn;
    @FXML
    private AnchorPane courseManageForm;
    @FXML
    private TextField txtSubjectID, txtSubjectName, txtCredits, txtLecturer;
    @FXML
    private ComboBox<String> cbSemester, cbStatus;
    @FXML
    private TableView<Subject> tblSubjects;
    @FXML
    private TableColumn<Subject, String> colSubjectID, colSubjectName, colLecturer, colSemester, colStatus;
    @FXML
    private TableColumn<Subject, Integer> colCredits;
    @FXML
    private Button btnAddSubject, btnRefreshSubject, btnDeleteSubject, btnClearAllSubjects, btnUpdateSubject,
            btnClearFormSubject;

    private ObservableList<Subject> subjectList = FXCollections.observableArrayList();

    // ========== M√îN H·ªåC PROPERTY ==========

    // =========== QU·∫¢N L√ù GI·∫¢NG VI√äN ===========
    @FXML
    private Button lecturerManageBtn;
    @FXML
    private AnchorPane lecturerManageForm;
    @FXML
    private TextField txtLecturerID, txtLecturerName, txtLecturerPhone;
    @FXML
    private ComboBox<String> cbLecturerGender, cbLecturerDegree, cbLecturerStatus;
    @FXML
    private TableView<?> tableLecturer;
    @FXML
    private TableColumn<?, ?> colLecturerID, colLecturerName, colLecturerGender, colLecturerDegree, colLecturerPhone,
            colLecturerStatus;
    @FXML
    private Button btnAddLecturer, btnRefreshLecturer, btnDeleteLecturer, btnClearAllLecturer, btnUpdateLecturer,
            btnClearFormLecturer;

    // - C·∫ßn t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng Lecturer
    // private ObservableList<Lecturer> lecturerList =
    // FXCollections.observableArrayList();

    // =========== QU·∫¢N L√ù GI·∫¢NG VI√äN ===========

    // =========== QU·∫¢N L√ù ƒêI·ªÇM ===========

    @FXML
    private AnchorPane gradesManageForm;
    @FXML
    private TextField txtStudentIDGrades, txtMidtermGrade, txtFinalGrade, txtTotalGrade, txtSearchGrades;

    @FXML
    private Label lblSchoolYearGrades, lblSubjectGrades;

    @FXML
    private Button btnAddGrades, btnRefreshGrades, btnDeleteGrades, btnClearAllGrades, btnUpdateGrades,
            btnClearFormGrades, gradesManageBtn;

    @FXML
    private TableView<?> tableGrades;

    @FXML
    private TableColumn<?, ?> colStudentIDGrades, colSchoolYearGrades, colSubjectGrades, colMidtermGrade,
            colFinalGrade, colTotalGrade;

    // =========== QU·∫¢N L√ù ƒêI·ªÇM ===========

    // =========== TH√îNG TIN ===========

    @FXML
    private Button infoManageBtn, versionBtn, teamBtn, technologyBtn, clauseBtn, questionBtn;
    @FXML
    private AnchorPane infoManageForm, versionForm, teamForm, technologyForm, clauseForm, questionForm;

    // =========== TH√îNG TIN ===========

    // To·∫° ƒë·ªô x v√† y ƒë·ªÉ di chuy·ªÉn c·ª≠a s·ªï
    private double xOffset = 0;
    private double yOffset = 0;

    @FXML
    public void initialize() {
        // ·∫®n c√°c form qu·∫£n l√Ω
        dashboardForm.setVisible(true);
        studentManageForm.setVisible(false);
        courseManageForm.setVisible(false);
        lecturerManageForm.setVisible(false);
        gradesManageForm.setVisible(false);
        infoManageForm.setVisible(false);

        // Drag window
        mainDashboard.setOnMousePressed(e -> {
            xOffset = e.getSceneX();
            yOffset = e.getSceneY();
        });

        mainDashboard.setOnMouseDragged(e -> {
            Stage currentStage = (Stage) mainDashboard.getScene().getWindow();
            currentStage.setX(e.getScreenX() - xOffset);
            currentStage.setY(e.getScreenY() - yOffset);

            // Set opacity to 0.8 when dragging
            currentStage.setOpacity(0.8);
        });

        mainDashboard.setOnMouseReleased(e -> {
            Stage currentStage = (Stage) mainDashboard.getScene().getWindow();
            currentStage.setOpacity(1.0);
        });

        // Close windows
        closeBtn.setOnAction(e -> {
            System.exit(0);
        });

        // Minimize windows
        minimizeBtn.setOnAction(e -> {
            Stage currentStage = (Stage) minimizeBtn.getScene().getWindow();
            currentStage.setIconified(true);
        });

        // Logout
        logoutBtn.setOnAction(e -> logoutHandle());

        // ========== SHOW FORMS ==========
        dashboardBtn.setOnAction(e -> switchForm(dashboardForm, dashboardBtn));
        studentManageBtn.setOnMouseClicked(e -> switchForm(studentManageForm, studentManageBtn));
        courseManageBtn.setOnMouseClicked(e -> switchForm(courseManageForm, courseManageBtn));
        lecturerManageBtn.setOnMouseClicked(e -> switchForm(lecturerManageForm, lecturerManageBtn));
        gradesManageBtn.setOnMouseClicked(e -> switchForm(gradesManageForm, gradesManageBtn));
        infoManageBtn.setOnMouseClicked(e -> switchForm(infoManageForm, infoManageBtn));

        // ========== SHOW FORMS ==========

        // ========== QU·∫¢N L√ù SINH VI√äN ==========

        addStudentsShowList();

        // S·ª± ki·ªán nh·∫•p ƒë√∫p chu·ªôt v√†o m·ªôt d√≤ng trong b·∫£ng sinh vi√™n -> M·ªü form ch·ªânh s·ª≠a
        studentTable.setOnMouseClicked(e -> {
            if (e.getClickCount() == 2) { // N·∫øu nh·∫•p ƒë√∫p chu·ªôt v√†o m·ªôt d√≤ng
                openStudentForm();
            }
        });
        btnAdd.setOnAction(e -> handleAddBtn()); // Ph∆∞∆°ng th·ª©c th√™m sinh vi√™n
        btnRefresh.setOnAction(e -> {
            studentManageSearch.clear(); // Xo√° n·ªôi dung √¥ t√¨m ki·∫øm khi l√†m m·ªõi
            addStudentsShowList();
        }); // Ph∆∞∆°ng th·ª©c l√†m m·ªõi b·∫£ng sinh vi√™n
        btnUpdate.setOnAction(e -> handleUpdateStudent()); // Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t sinh vi√™n
        btnDelete.setOnAction(e -> handleDeleteStudent()); // Ph∆∞∆°ng th·ª©c x√≥a sinh vi√™n
        btnClearAll.setOnAction(e -> handleDeleteAllStudents()); // Ph∆∞∆°ng th·ª©c x√≥a to√†n b·ªô sinh vi√™n
        studentManageSearch.textProperty().addListener((observable, oldValue, newValue) -> searchStudent()); // T√¨m ki·∫øm sinh vi√™n

        // ========== QU·∫¢N L√ù SINH VI√äN ==========

        // ========== QU·∫¢N L√ù M√îN H·ªåC ==========

        cbSemester.getItems().addAll("Ch·ªçn", "H·ªçc k·ª≥ 1", "H·ªçc k·ª≥ 2", "H·ªçc k·ª≥ 3");
        cbStatus.getItems().addAll("Ch·ªçn", "ƒêang m·ªü", "ƒê√≥ng");

        colSubjectID.setCellValueFactory(new PropertyValueFactory<>("subjectID"));
        colSubjectName.setCellValueFactory(new PropertyValueFactory<>("subjectName"));
        colCredits.setCellValueFactory(new PropertyValueFactory<>("credits"));
        colLecturer.setCellValueFactory(new PropertyValueFactory<>("lecturer"));
        colSemester.setCellValueFactory(new PropertyValueFactory<>("semester"));
        colStatus.setCellValueFactory(new PropertyValueFactory<>("status"));

        tblSubjects.setItems(subjectList);

        btnClearFormSubject.setOnAction(e -> clearFormSubject());

        // ========== QU·∫¢N L√ù M√îN H·ªåC ==========

        // ========== QU·∫¢N L√ù GI·∫¢NG VI√äN ==========

        colLecturerID.setCellValueFactory(new PropertyValueFactory<>("lecturerID"));
        colLecturerName.setCellValueFactory(new PropertyValueFactory<>("lecturerName"));
        colLecturerGender.setCellValueFactory(new PropertyValueFactory<>("gender"));
        colLecturerDegree.setCellValueFactory(new PropertyValueFactory<>("degree"));
        colLecturerPhone.setCellValueFactory(new PropertyValueFactory<>("phone"));
        colLecturerStatus.setCellValueFactory(new PropertyValueFactory<>("status"));

        // Kh·ªüi t·∫°o d·ªØ li·ªáu cho ComboBox
        cbLecturerGender.getItems().addAll("Ch·ªçn", "Nam", "N·ªØ");
        cbLecturerDegree.getItems().addAll("Ch·ªçn", "C·ª≠ nh√¢n", "Th·∫°c sƒ©", "Ti·∫øn sƒ©", "Ph√≥ gi√°o s∆∞", "Gi√°o s∆∞");
        cbLecturerStatus.getItems().addAll("Ch·ªçn", "ƒêang gi·∫£ng d·∫°y", "Ngh·ªâ ph√©p", "ƒê√£ ngh·ªâ h∆∞u");

        // Th√™m s·ª± ki·ªán cho c√°c Button
        btnAddLecturer.setOnAction(e -> AddLecturerHandle());
        btnUpdateLecturer.setOnAction(e -> UpdateLecturerHandle());
        btnDeleteLecturer.setOnAction(e -> DeleteLecturerHandle());
        btnClearFormLecturer.setOnAction(e -> clearFormLecturerHandle());
        btnClearAllLecturer.setOnAction(e -> clearAllLecturerHandle());
        btnRefreshLecturer.setOnAction(e -> refreshLecturerHandle());

        // ========== QU·∫¢N L√ù GI·∫¢NG VI√äN ==========

        // ========== QU·∫¢N L√ù ƒêI·ªÇM ==========

        // G√°n d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho b·∫£ng ƒëi·ªÉm
        setupTableColumns();
        loadGradesData();

        // S·ª± ki·ªán n√∫t th√™m ƒëi·ªÉm
        btnAddGrades.setOnAction(e -> handleAddGrades());

        // S·ª± ki·ªán n√∫t c·∫≠p nh·∫≠t ƒëi·ªÉm
        btnUpdateGrades.setOnAction(e -> handleUpdateGrades());

        // S·ª± ki·ªán n√∫t x√≥a ƒëi·ªÉm
        btnDeleteGrades.setOnAction(e -> handleDeleteGrades());

        // S·ª± ki·ªán n√∫t x√≥a to√†n b·ªô ƒëi·ªÉm
        btnClearAllGrades.setOnAction(e -> handleClearAllGrades());

        // S·ª± ki·ªán n√∫t l√†m m·ªõi form
        btnRefreshGrades.setOnAction(e -> handleRefreshGrades());

        // S·ª± ki·ªán n√∫t x√≥a th√¥ng tin nh·∫≠p li·ªáu
        btnClearFormGrades.setOnAction(e -> clearGradesForm());

        // G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh
        btnAddGrades.setDisable(true);

        // ========== QU·∫¢N L√ù ƒêI·ªÇM ==========

        // ========== TH√îNG TIN ==========

        versionBtn.setOnAction(e -> versionBtnHandle());
        teamBtn.setOnAction(e -> teamBtnHandle());
        technologyBtn.setOnAction(e -> technologyBtnHandle());
        clauseBtn.setOnAction(e -> clauseBtnHandle());
        questionBtn.setOnAction(e -> questionBtnHandle());

        // ========== TH√îNG TIN ==========
    }

    // ---> C√ÅC H√ÄM X·ª¨ L√ù <---

    // - Tong quan -

    // Phuong thuc hien thi form duoc chon va an cac form con lai
    private void switchForm(AnchorPane selectedForm, Button selectedButton) {
        // Danh s√°ch t·∫•t c·∫£ c√°c form
        AnchorPane[] allForms = { dashboardForm, studentManageForm, courseManageForm, lecturerManageForm,
                gradesManageForm, infoManageForm };

        // Danh s√°ch c√°c n√∫t t∆∞∆°ng ·ª©ng
        Button[] allButtons = { dashboardBtn, studentManageBtn, courseManageBtn, lecturerManageBtn, gradesManageBtn,
                infoManageBtn };

        // X·ª≠ l√Ω hi·ªÉn th·ªã form
        for (AnchorPane form : allForms) {
            form.setVisible(form == selectedForm);
        }

        // ƒê·∫∑t m√†u n·ªÅn cho n√∫t ƒë∆∞·ª£c ch·ªçn v√† reset c√°c n√∫t kh√°c
        for (Button button : allButtons) {
            if (button == selectedButton) {
                button.setStyle("-fx-background-color: #0093e9;");
            } else {
                button.setStyle("-fx-background-color: transparent;");
            }
        }
    }

    private void logoutHandle() {
        try {
            // Thong bao xac nhan dang xuat
            if (AlertComponent.showConfirmation("Th√¥ng b√°o x√°c nh·∫≠n", null, "B·∫°n c√≥ mu·ªën ƒëƒÉng xu·∫•t kh√¥ng?")) {
                logoutBtn.getScene().getWindow().hide();
                Parent root = FXMLLoader.load(getClass().getResource("../view/login.fxml"));
                Stage stage = new Stage();
                Scene scene = new Scene(root);

                // Drag window
                root.setOnMousePressed(e -> {
                    xOffset = e.getSceneX();
                    yOffset = e.getSceneY();
                });

                root.setOnMouseDragged(e -> {
                    Stage currentStage = (Stage) root.getScene().getWindow();
                    currentStage.setX(e.getScreenX() - xOffset);
                    currentStage.setY(e.getScreenY() - yOffset);

                    // Set opacity to 0.8 when dragging
                    currentStage.setOpacity(0.8);
                });

                root.setOnMouseReleased(e -> {
                    Stage currentStage = (Stage) root.getScene().getWindow();
                    currentStage.setOpacity(1.0);
                });

                stage.initStyle(StageStyle.TRANSPARENT);
                stage.setScene(scene);
                stage.show();
            } else
                return;

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // - Tong quan -

    // ========== QU·∫¢N L√ù SINH VI√äN ==========

    public ObservableList<StudentData> addStudentsListData() {
        ObservableList<StudentData> listStudents = FXCollections.observableArrayList();
        String sql = "SELECT * FROM students";
        connect = database.connectDB();

        try {
            StudentData studentData;
            preparedStatement = connect.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                studentData = new StudentData(
                        resultSet.getString("student_id"),
                        resultSet.getString("first_name"),
                        resultSet.getString("last_name"),
                        resultSet.getDate("birth_date"),
                        resultSet.getString("gender"),
                        resultSet.getString("school_year"),
                        resultSet.getString("major"),
                        resultSet.getString("subject"),
                        resultSet.getString("status"),
                        resultSet.getString("photo_path"));

                listStudents.add(studentData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return listStudents;
    }

    private ObservableList<StudentData> addStudentsListD;

    public void addStudentsShowList() {
        addStudentsListD = addStudentsListData();

        student_colStudentID.setCellValueFactory(new PropertyValueFactory<>("studentID"));
        student_colFirstName.setCellValueFactory(new PropertyValueFactory<>("firstName"));
        student_colLastName.setCellValueFactory(new PropertyValueFactory<>("lastName"));
        student_colBirthYear.setCellValueFactory(new PropertyValueFactory<>("birthDate"));
        student_colGender.setCellValueFactory(new PropertyValueFactory<>("gender"));
        student_colSchoolYear.setCellValueFactory(new PropertyValueFactory<>("schoolYear"));
        student_colMajor.setCellValueFactory(new PropertyValueFactory<>("major"));
        student_colSubject.setCellValueFactory(new PropertyValueFactory<>("subject"));
        student_colStatus.setCellValueFactory(new PropertyValueFactory<>("status"));

        studentTable.setItems(addStudentsListD);
    }

    private void openStudentForm() {
        // L·∫•y sinh vi√™n ƒë∆∞·ª£c ch·ªçn t·ª´ TableView
        StudentData selectedStudent = studentTable.getSelectionModel().getSelectedItem();

        if (selectedStudent == null) {
            AlertComponent.showWarning("L·ªói", null, "Vui l√≤ng ch·ªçn m·ªôt sinh vi√™n!");
            return;
        }

        try {
            // Load student_form.fxml
            FXMLLoader loader = new FXMLLoader(getClass().getResource("../view/student_form.fxml"));
            Parent root = loader.load();

            // L·∫•y controller c·ªßa student_form.fxml
            studentController controller = loader.getController();

            // G·ª≠i d·ªØ li·ªáu sinh vi√™n v√†o form
            controller.setStudentData(selectedStudent);

            // T·∫°o m·ªôt Stage m·ªõi ƒë·ªÉ hi·ªÉn th·ªã form
            Stage stage = new Stage();
            stage.initStyle(StageStyle.TRANSPARENT);
            stage.setScene(new Scene(root));
            stage.show();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleUpdateStudent() {
        StudentData selectedStudent = studentTable.getSelectionModel().getSelectedItem();

        if (selectedStudent == null) {
            AlertComponent.showWarning("L·ªói", null, "Vui l√≤ng ch·ªçn m·ªôt sinh vi√™n!");
            return;
        }

        try {
            // Load student_form.fxml
            FXMLLoader loader = new FXMLLoader(getClass().getResource("../view/student_form.fxml"));
            Parent root = loader.load();

            // L·∫•y controller c·ªßa student_form.fxml
            studentController controller = loader.getController();

            // G·ª≠i d·ªØ li·ªáu sinh vi√™n v√†o form nh∆∞ng cho ph√©p ch·ªânh s·ª≠a
            controller.setStudentData(selectedStudent);
            controller.enableEditMode(); // B·∫≠t ch·∫ø ƒë·ªô ch·ªânh s·ª≠a

            // T·∫°o m·ªôt Stage m·ªõi ƒë·ªÉ hi·ªÉn th·ªã form
            Stage stage = new Stage();
            stage.initStyle(StageStyle.TRANSPARENT);
            stage.setScene(new Scene(root));
            stage.show();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Ph∆∞∆°ng th·ª©c xo√° sinh vi√™n (1 sinh vi√™n)
    private void handleDeleteStudent() {
        StudentData selectedStudent = studentTable.getSelectionModel().getSelectedItem();

        if (selectedStudent == null) {
            AlertComponent.showWarning("L·ªói", null, "Vui l√≤ng ch·ªçn m·ªôt sinh vi√™n ƒë·ªÉ x√≥a!");
            return;
        }

        // Hi·ªÉn th·ªã x√°c nh·∫≠n x√≥a
        boolean confirm = AlertComponent.showConfirmation("X√°c nh·∫≠n", null,
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a sinh vi√™n c√≥ MSSV: " + selectedStudent.getStudentID() + " kh√¥ng?");

        if (!confirm)
            return;

        String sql = "DELETE FROM students WHERE student_id = ?";
        connect = database.connectDB();

        try {
            preparedStatement = connect.prepareStatement(sql);
            preparedStatement.setString(1, selectedStudent.getStudentID());
            int rowsDeleted = preparedStatement.executeUpdate();

            if (rowsDeleted > 0) {
                AlertComponent.showInformation("Th√†nh c√¥ng", null, "ƒê√£ x√≥a sinh vi√™n th√†nh c√¥ng!");
                addStudentsShowList(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch sinh vi√™n trong b·∫£ng
            } else {
                AlertComponent.showError("L·ªói", null, "Kh√¥ng th·ªÉ x√≥a sinh vi√™n!");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (preparedStatement != null)
                    preparedStatement.close();
                if (connect != null)
                    connect.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    // Ph∆∞∆°ng th·ª©c xo√° to√†n b·ªô sinh vi√™n trong b·∫£ng
    private void handleDeleteAllStudents() {
        // Hi·ªÉn th·ªã c·∫£nh b√°o tr∆∞·ªõc khi x√≥a to√†n b·ªô d·ªØ li·ªáu
        boolean confirm = AlertComponent.showConfirmation("X√°c nh·∫≠n", null,
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô sinh vi√™n trong h·ªá th·ªëng kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!");

        if (!confirm)
            return;

        String sql = "DELETE FROM students";
        connect = database.connectDB();

        try {
            preparedStatement = connect.prepareStatement(sql);
            int rowsDeleted = preparedStatement.executeUpdate();

            if (rowsDeleted > 0) {
                AlertComponent.showInformation("Th√†nh c√¥ng", null, "ƒê√£ x√≥a to√†n b·ªô sinh vi√™n th√†nh c√¥ng!");
                addStudentsShowList(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch sinh vi√™n trong b·∫£ng
            } else {
                AlertComponent.showWarning("Th√¥ng b√°o", null, "Kh√¥ng c√≥ sinh vi√™n n√†o trong h·ªá th·ªëng ƒë·ªÉ x√≥a!");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (preparedStatement != null)
                    preparedStatement.close();
                if (connect != null)
                    connect.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    // Ph∆∞∆°ng th·ª©c t√¨m ki·∫øm sinh vi√™n
    private void searchStudent() {
        String keyword = studentManageSearch.getText().toLowerCase().trim();
        if (keyword.isEmpty()) {
            studentTable.setItems(addStudentsListD); // N·∫øu √¥ t√¨m ki·∫øm tr·ªëng, hi·ªÉn th·ªã l·∫°i to√†n b·ªô d·ªØ li·ªáu
            return;
        }
    
        ObservableList<StudentData> filteredList = FXCollections.observableArrayList();
        for (StudentData student : addStudentsListD) {
            if (student.getStudentID().toLowerCase().contains(keyword) ||
                student.getFirstName().toLowerCase().contains(keyword) ||
                student.getLastName().toLowerCase().contains(keyword)) {
                filteredList.add(student);
            }
        }
    
        studentTable.setItems(filteredList);
    }
    

    // Show add student form
    private void handleAddBtn() {
        showStage.showWindows("../view/student_form.fxml", "");
    }

    // MORE...

    // ========== QU·∫¢N L√ù SINH VI√äN ==========

    // ========== QU·∫¢N L√ù M√îN H·ªåC ==========

    private void clearFormSubject() {
        txtSubjectID.clear();
        txtSubjectName.clear();
        txtCredits.clear();
        txtLecturer.clear();
        cbSemester.setValue("Ch·ªçn");
        cbStatus.setValue("Ch·ªçn");
    }

    // ========== QU·∫¢N L√ù M√îN H·ªåC ==========

    // ========== QU·∫¢N L√ù GI·∫¢NG VI√äN ==========
    private void AddLecturerHandle() {
        System.out.println("Add lecturer");
    }

    private void UpdateLecturerHandle() {
        System.out.println("Update lecturer");
    }

    private void DeleteLecturerHandle() {
        System.out.println("Delete lecturer");
    }

    private void clearFormLecturerHandle() {
        // Clear all forms
        txtLecturerID.clear();
        txtLecturerName.clear();
        txtLecturerPhone.clear();
        cbLecturerGender.setValue(null);
        cbLecturerDegree.setValue(null);
        cbLecturerStatus.setValue(null);
    }

    private void clearAllLecturerHandle() {
        System.out.println("Clear all lecturer");
    }

    private void refreshLecturerHandle() {
        System.out.println("Refresh lecturer");
    }

    // ========== QU·∫¢N L√ù GI·∫¢NG VI√äN ==========

    // ========== QU·∫¢N L√ù ƒêI·ªÇM ==========

    private void setupTableColumns() {
        colStudentIDGrades.setCellValueFactory(new PropertyValueFactory<>("studentID"));
        colSchoolYearGrades.setCellValueFactory(new PropertyValueFactory<>("schoolYear"));
        colSubjectGrades.setCellValueFactory(new PropertyValueFactory<>("subject"));
        colMidtermGrade.setCellValueFactory(new PropertyValueFactory<>("midterm"));
        colFinalGrade.setCellValueFactory(new PropertyValueFactory<>("finalExam"));
        colTotalGrade.setCellValueFactory(new PropertyValueFactory<>("totalGrade"));
    }

    private void loadGradesData() {
        // ObservableList<Grades> gradesList = FXCollections.observableArrayList();

        // // Gi·∫£ l·∫≠p d·ªØ li·ªáu t·ª´ database
        // gradesList.add(new Grades("SV001", "2023-2024", "L·∫≠p tr√¨nh Java", 7.5, 8.0,
        // 7.75));
        // gradesList.add(new Grades("SV002", "2023-2024", "C·∫•u tr√∫c d·ªØ li·ªáu", 6.0, 7.5,
        // 6.75));

        // tableGrades.setItems(gradesList);
    }

    private void handleAddGrades() {
        System.out.println("Add grades");
    }

    private void handleUpdateGrades() {
        System.out.println("Update grades");
    }

    private void handleDeleteGrades() {
        System.out.println("Delete grades");
    }

    private void handleClearAllGrades() {
        System.out.println("Clear all grades");
    }

    private void handleRefreshGrades() {
        System.out.println("Refresh grades");
    }

    private void clearGradesForm() {
        txtStudentIDGrades.clear();
        lblSchoolYearGrades.setText("-");
        lblSubjectGrades.setText("-");
        txtMidtermGrade.clear();
        txtFinalGrade.clear();
        txtTotalGrade.clear();
    }

    // ========== QU·∫¢N L√ù ƒêI·ªÇM ==========

    // ========== TH√îNG TIN ==========

    private void versionBtnHandle() {
        if (teamForm.isVisible() || technologyForm.isVisible() || clauseForm.isVisible() || questionForm.isVisible()) {
            questionForm.setVisible(false);
            teamForm.setVisible(false);
            technologyForm.setVisible(false);
            clauseForm.setVisible(false);
        }
        versionForm.setVisible(true);
    }

    private void teamBtnHandle() {
        if (versionForm.isVisible() || technologyForm.isVisible() || clauseForm.isVisible()
                || questionForm.isVisible()) {
            questionForm.setVisible(false);
            versionForm.setVisible(false);
            technologyForm.setVisible(false);
            clauseForm.setVisible(false);
        }
        teamForm.setVisible(true);
    }

    private void technologyBtnHandle() {
        if (versionForm.isVisible() || teamForm.isVisible() || clauseForm.isVisible() || questionForm.isVisible()) {
            versionForm.setVisible(false);
            teamForm.setVisible(false);
            clauseForm.setVisible(false);
            questionForm.setVisible(false);
        }
        technologyForm.setVisible(true);
    }

    private void clauseBtnHandle() {
        if (versionForm.isVisible() || teamForm.isVisible() || technologyForm.isVisible() || questionForm.isVisible()) {
            versionForm.setVisible(false);
            teamForm.setVisible(false);
            technologyForm.setVisible(false);
            questionForm.setVisible(false);
        }
        clauseForm.setVisible(true);
    }

    private void questionBtnHandle() {
        if (versionForm.isVisible() || teamForm.isVisible() || technologyForm.isVisible() || clauseForm.isVisible()) {
            versionForm.setVisible(false);
            teamForm.setVisible(false);
            technologyForm.setVisible(false);
            clauseForm.setVisible(false);
        }
        questionForm.setVisible(true);
    }

    // ========== TH√îNG TIN ==========

    // ---> END C√ÅC H√ÄM X·ª¨ L√ù <---
}
